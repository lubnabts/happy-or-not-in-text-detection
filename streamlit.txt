# Core Pkgs
import streamlit as st 
import altair as alt
import plotly.express as px 
import matplotlib.pyplot as plt
# EDA Pkgs
import pandas as pd 
import numpy as np 
from datetime import datetime

# Utils
import joblib 
pipe_lr = joblib.load(r"C:\Users\user\Downloads\nlp.joblip")
pipe_lr=joblib.load(r"C:\Users\user\Downloads\nlp.joblip")
global vectroizer
vectroizer=joblib.load(r"C:\Users\user\Downloads\vectorizer.joblib")

global new_array
def change(raw_text):
    raw_text = vectroizer.transform([raw_text])
    return raw_text.toarray()
    
def predict_emotions(text):
    result = pipe_lr.predict(text)
    return result[0]

def get_prediction_proba(docx):
 	results = pipe_lr.predict_proba(docx)
 	return results

emotions_emoji_dict = {0:"I did not like the movie",1:"I liked the movie"}

# Main Application
def main():
	st.title("impression Classifier App")
	menu = ["Home"]
	choice = st.sidebar.selectbox("Menu",menu)
	
	
	if choice == "Home":
		
		st.subheader("Home-\n impression In Text")

		with st.form(key='emotion_clf_form'):
			raw_text = (st.text_area("Type Here"))
			submit_text = st.form_submit_button(label='Submit')

		if submit_text:
			col1,col2  = st.columns(2)
            

			# Apply Fxn Here
			prediction = predict_emotions(change(raw_text))
			probability = get_prediction_proba(change(raw_text))
			

			with col1:
				st.success("Original Text")
				st.write(raw_text)

				st.success("Prediction")
				emoji_icon = emotions_emoji_dict[prediction]
				st.write("{}:{}".format(prediction,emoji_icon))
				st.write("Confidence:{}".format(np.max(probability)))



			with col2:
				st.success("Prediction Probability")
				# st.write(probability)
				proba_df = pd.DataFrame(probability,columns=pipe_lr.classes_)
				# st.write(proba_df.T)
				proba_df_clean = proba_df.T.reset_index()
				proba_df_clean.columns = ["emotions","probability"]

				fig = alt.Chart(proba_df_clean).mark_bar().encode(x='emotions',y='probability')
				st.altair_chart(fig,use_container_width=True)
                
                
			

if __name__ == '__main__':
	main()
